MAVEN


Основные циклы жизни проекта:

1) clean
2) default (or build)
3) site


Основные этапы жизни проекта:

Подготовка ресурсов (*-resources)
Валидация (validate)
Компиляция (compile)
Тестирование (test)
Упаковка (package - JAR/WAR/EAR)
Установка (в репозиторий) - install
Деплой (deploy)

validate : подтвердить правильность проекта и наличие всей необходимой информации
compile : скомпилировать исходный код проекта
test : протестируйте скомпилированный исходный код с помощью подходящей среды модульного тестирования. Эти тесты не должны требовать упаковки или развертывания кода.
package : возьмите скомпилированный код и упакуйте его в распространяемый формат, такой как JAR.
Integration-test : обработать и при необходимости развернуть пакет в среде, где можно запускать интеграционные тесты.
Verify : запустить любые проверки, чтобы убедиться, что пакет действителен и соответствует критериям качества.
install : установить пакет в локальный репозиторий для использования в качестве зависимости в других проектах локально
deploy : выполняется в среде интеграции или выпуска, копирует окончательный пакет в удаленный репозиторий для совместного использования с другими разработчиками и проектами.

Помимо приведенного выше списка по умолчанию , есть еще два важных жизненных цикла Maven . Они есть

clean : очищает артефакты, созданные предыдущими сборками.
site : генерирует документацию сайта для этого проекта


Команды (goals):

pre-clean
clean
post-clean


Профиль сборки (build profile):

Основные:
Профиль проекта
settings.xml (userhome/.m2/settings.xml)
Глобальный файл конфигурации (maven_install_dir/conf/settings.xml)


Репозитории:

Local
Central
Remote


Плагины:

В MVN все команды состоят из плагинов - программ, котороые выполняют определенные функции.

mvn [plugin-name]:[goal:name]

build (плагины сборки)
report (плагины содания отчетов)


Зависимости:

Мавен использует транзитивные зависимости, то есть он сам решает, какие зависимости использовать.
Но в разделе dependencyManagement, можно переопределить это.


Scope (область видимости):

Указывается в разделе dependency, указывает когда зависимость 
будет использоваться.

compile используется по умолчанию.
provided когда зависимость предоставляется контейнером.
runtime зависимость компилировать не нужно, будет предоставлена во время выполнения приложения.
test указывает на то, что зависимость необходима для тестирования.
import используется из dependencyManagement.


____________________________________________________________________________________________________

POM.XML

<project xmlns="http://maven.apache.org/POM/4.0.0"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
     http://maven.apache.org/xsd/maven-4.0.0.xsd">
   
    <modelVersion>4.0.0</modelVersion>

    <!-- GAV параметры описания проекта -->
    <groupId>...</groupId>
    <artifactId>...</artifactId>
    <packaging>...</packaging>
    <version>...</version>

    <!-- Секция свойств -->
    <properties>
        . . .
    </properties>

    <!-- Секция репозиториев -->
    <repositories>
        . . .
    </repositories>

    <!-- Секция зависимостей -->
    <dependencies>
        . . .
    </dependencies>
  
    <!-- Секция сборки -->
    <build>
        <finalName>projectName</finalName>
        <sourceDirectory>${basedir}/src/java</sourceDirectory>
        <outputDirectory>${basedir}/targetDir</outputDirectory>
        <resources>
            <resource>
                <directory>${basedir}/src/java/resources</directory>
                <includes>
                    <include>**/*.properties</include>
                </includes>
            </resource>
        </resources>
        <plugins>
            . . .
        </plugins>
    </build>
</project>
